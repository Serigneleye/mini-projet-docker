---
image: docker:stable
default:
  interruptible: true
services:
  - name: docker:dind
    alias: docker
variables:
  GIT_STRATEGY: none
  APK_CACHE_DIR: $CI_PROJECT_DIR/.cache/apk


stages:
  - Lint Code
  - Build
  - Security scan
  - Auto test
  - Code quality
  - Packaging
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy prod
  - Test prod
 
 
.test_template: &test
  image: alpine
  only:
    - master
  script:
    - mkdir -p $APK_CACHE_DIR
    - apk add curl --cache-dir $APK_CACHE_DIR
    - curl "http://${HOSTNAME_DEPLOY}" | grep "Hello world!"
  dependencies: []
  cache:
    key: cache-apk
    paths:
      - $APK_CACHE_DIR
 
 
.before_script_ssh: &setup_ssh
  before_script:
    - mkdir -p $APK_CACHE_DIR
    - apk add openssh-client --cache-dir $APK_CACHE_DIR
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "${SSH_KEY}" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -t rsa  ${HOSTNAME_DEPLOY} >> ~/.ssh/known_hosts
  dependencies: []
  cache:
    key: cache-apk
    paths:
      - $APK_CACHE_DIR


.deploy_template: &deploy
  interruptible: false
  script:
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp"
    - command4="docker run -d -p 80:5000 -e PORT=5000 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY}
      -o SendEnv=CI_REGISTRY_IMAGE
      -o SendEnv=CI_COMMIT_REF_SLUG
      -o SendEnv=CI_REGISTRY_USER
      -o SendEnv=CI_REGISTRY_PASSWORD
      -o SendEnv=CI_REGISTRY
      -C "$command1 && $command2 && $command3 && $command4"
 
 
.fact_deploy: &fact_deploy
  only:
   - master
  <<: *setup_ssh
  <<: *deploy


python lint:
  stage: Lint Code
  image: python
  variables: 
    GIT_STRATEGY: clone
  before_script:
    - pip install flake8
  script:
    - flake8 webapp/app.py --ignore=E501 --ignore=E303 


docker lint:
  stage: Lint Code
  image: hadolint/hadolint:2.9.2-debian
  variables: 
    GIT_STRATEGY: clone
  script:
    - hadolint --failure-threshold error Dockerfile 

 
build:
  stage: Build
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_REF_SLUG
  variables: 
    GIT_STRATEGY: clone
  script:
    - docker build -t alpinehelloworld .
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths:
      - alpinehelloworld.tar
    expire_in: "1"


security scan:
  stage: Security scan
  only:
    - master
  variables:
    IMAGE_NAME: alpinehelloworld
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
    - docker load < alpinehelloworld.tar
    # Build report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/junit.tpl" -o gl-container-scanning-report.xml $IMAGE_NAME
    # Print report
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $IMAGE_NAME
    # Fail on severe vulnerabilities
    - echo -e "CVE-2023-30861\nCVE-2023-25577\nCVE-2022-29361" > .trivyignore
    - ./trivy image --exit-code 1 --cache-dir .trivycache/ --vuln-type library --severity CRITICAL --no-progress $IMAGE_NAME
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      junit:
        - gl-container-scanning-report.xml
 
 
test image docker:
  stage: Auto test
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_REF_SLUG
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p 80:5000 -e PORT=5000 --name webapp alpinehelloworld
    - sleep 5
    - mkdir -p $APK_CACHE_DIR
    - apk add curl --cache-dir $APK_CACHE_DIR
    - curl "http://docker" | grep  "Hello world!"
  cache:
    key: cache-apk
    paths:
      - $APK_CACHE_DIR


unit and integration tests:
  stage: Auto test
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_REF_SLUG
  script:
    - docker load < alpinehelloworld.tar
    - docker run --rm -e PORT=5000 --name webapp alpinehelloworld python3 tests.py


quality:
  stage: Code quality
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_REF_SLUG
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  allow_failure: true
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache


packaging:
  stage: Packaging
  only: 
    - master
    - merge_requests
  script:
    - docker load < alpinehelloworld.tar
    - docker tag alpinehelloworld "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
    - docker tag alpinehelloworld "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"


deploy review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://{HOSTNAME_DEPLOY} #eg: http://ec2-54-211-169-95.compute-1.amazonaws.com
    on_stop: stop review
  only:
    - merge_requests
  <<: *setup_ssh
  script:
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - command3="docker run -d -p 80:5000 -e PORT=5000 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || (echo \"Feature already exist on this environment!\" && exit 125)"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY}
      -o SendEnv=CI_REGISTRY_IMAGE
      -o SendEnv=CI_COMMIT_REF_SLUG
      -o SendEnv=CI_REGISTRY_USER
      -o SendEnv=CI_REGISTRY_PASSWORD
      -o SendEnv=CI_REGISTRY
      -C "$command1 && $command2 && $command3"


stop review:
  stage: Stop review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  only:
    - merge_requests
  when: manual
  <<: *setup_ssh
  script:
    - command1="docker rm -vf webapp"
    - command2="docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY}
      -o SendEnv=CI_REGISTRY_IMAGE
      -o SendEnv=CI_COMMIT_REF_SLUG
      -C "$command1 && $command2"
 
 
deploy staging:
  stage: Deploy staging
  environment:
    name: staging
    url: http://${HOSTNAME_DEPLOY}
  <<: *fact_deploy


test staging:
  <<: *test
  stage: Test staging
  environment:
    name: staging
 
 
deploy prod:
  stage: Deploy prod
  environment:
    name: prod
    url: http://${HOSTNAME_DEPLOY}
  <<: *fact_deploy


test prod:
  <<: *test
  stage: Test prod
  environment:
    name: prod